using System;
using System.Threading.Tasks;
using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;

namespace jiratg_bot
{

    enum MyStates
    {
        Init,
        WaitForType,
        WaitForHeader,
        WaitForBoard,
        WaitForSeverity,
        WaitForAssignee,
    };
    
    
    /*
     * FSM –¥–ª—è –±–æ—Ç–∞.
     * Init -> WaitForType -> WaitForBoard -> WaitForSeverity -> WaitForAssignee -> WaitForHeader -> Init 
     */
    class BotFsm : FSM<MyStates>
    {
        
        private readonly ITelegramBotClient _bot;
        private readonly long _chatId;
        private int? _menuMessageId;
        private string _body;
        private string _header;
        private string _board;
        private string _severity;
        private string _assignee;
        private string _type;

        public BotFsm(ITelegramBotClient bot, long chatId) : base(MyStates.Init)
        {
            _bot = bot;
            _chatId = chatId;
        }

       
        async Task InitState(Update update)
        {
            if (update.Type != UpdateType.Message)
            {
                return;
            }

            var message = update.Message;
            if (message.Text != "/todo")
                return;
            if (message.ReplyToMessage == null)
            {
                await _bot.SendTextMessageAsync(
                    message.Chat.Id, "–ù—É–∂–µ–Ω —Ä–µ–ø–ª–∞–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –¥–µ–ª–∞–µ—Ç—Å—è —Ç–∞—Å–∫",
                    replyToMessageId: message.MessageId
                );
                return;
            }
            _body = message.ReplyToMessage.Text;
            await _bot.SendTextMessageAsync(message.Chat.Id,
                "–Ø —Å–µ–π—á–∞—Å –∑–∞–¥–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ —Å–æ–∑–¥–∞–º —Ç–∞—Å–∫ –≤ –∂–∏—Ä–µ.",
                replyToMessageId: message.MessageId);
            await Transition(MyStates.WaitForType);
        }

        async Task WaitForTypeState(Update update)
        {
            if (update.Type != UpdateType.CallbackQuery)
                return;
            var callbackQuery = update.CallbackQuery;
            _type = callbackQuery.Data;

            await Transition(MyStates.WaitForBoard);
        }

        async Task WaitForBoardState(Update update)
        {
            if (update.Type != UpdateType.CallbackQuery)
                return;
            var callbackQuery = update.CallbackQuery;
            _board = callbackQuery.Data;

            await Transition(MyStates.WaitForSeverity);
        }

        async Task WaitForSeverityState(Update update)
        {
            if (update.Type != UpdateType.CallbackQuery)
                return;
            var callbackQuery = update.CallbackQuery;

            _severity = callbackQuery.Data;
            
            await Transition(MyStates.WaitForAssignee);
        }

        async Task WaitForAssigneeState(Update update)
        {
            if (update.Type != UpdateType.CallbackQuery)
                return;
            var callbackQuery = update.CallbackQuery;
            _assignee = callbackQuery.Data;

            await Transition(MyStates.WaitForHeader);
        }

        async Task WaitForHeaderState(Update update)
        {
            var message = update.Message;
            _header = message.Text;

            await Transition(MyStates.Init);
        }
        

        // ################################################ 
        // transitions.
        // –º–µ—Ç–æ–¥—ã –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∫–∞–∫–æ–µ-—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ü–æ-–±–æ–ª—å—à–æ–º—É —Å—á—ë—Ç—É, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫–æ–π-—Ç–æ –≤–æ–ø—Ä–æ—Å
        // ################################################

        async Task WaitForTypeTransition(MyStates prev)
        {
            await SimplyMenuTransition("–ë–∞–≥ –∏–ª–∏ —Ç–∞—Å–∫–∞?", new InlineKeyboardMarkup(new[]
            {
                new[]
                {
                    InlineKeyboardButton.WithCallbackData("üêõ Bug", "Bug"),
                    InlineKeyboardButton.WithCallbackData("‚úîÔ∏è Task", "Task"),
                }
            }));
        }

        async Task WaitForBoardTransition(MyStates prev)
        {
            await SimplyMenuTransition("–ù–∞ –∫–∞–∫—É—é –±–æ—Ä–¥—É –∫–ª–∞–¥—ë–º?", new InlineKeyboardMarkup(new[]
            {
                new[]
                {
                    InlineKeyboardButton.WithCallbackData("Backend", "BAC"),
                    InlineKeyboardButton.WithCallbackData("Frontend", "FRONT"),
                    InlineKeyboardButton.WithCallbackData("Devops", "DEVOPS"),
                }
            }));
        }

        async Task WaitForSeverityTransition(MyStates prev)
        {
            await SimplyMenuTransition("–ö–∞–∫–∞—è —Å—Ä–æ—á–Ω–æ—Å—Ç—å?", new InlineKeyboardMarkup(new[]
            {
                new[]
                {
                    InlineKeyboardButton.WithCallbackData("üò¥ Lowest", "Lowest"),
                    InlineKeyboardButton.WithCallbackData("ü•± Low", "Low"),
                    InlineKeyboardButton.WithCallbackData("Medium", "Medium"),
                    InlineKeyboardButton.WithCallbackData("üèÉ‚Äç‚ôÇÔ∏è High", "High"),
                    InlineKeyboardButton.WithCallbackData("üî• Highest", "Highest"),
                }
            }));
        }

        async Task WaitForAssigneeTransition(MyStates prev)
        {
            await SimplyMenuTransition("–ù–∞ –∫–æ–≥–æ –Ω–∞–∑–Ω–∞—á–∏—Ç—å?", new InlineKeyboardMarkup(new[]
            {
                new[]
                {
                    InlineKeyboardButton.WithCallbackData("–ù–∏ –Ω–∞ –∫–æ–≥–æ", "None"),
                    InlineKeyboardButton.WithCallbackData("–ê", "A"),
                    InlineKeyboardButton.WithCallbackData("B", "B"),
                    InlineKeyboardButton.WithCallbackData("C", "C"),
                    InlineKeyboardButton.WithCallbackData("D", "D"),
                }
            }));
        }

        async Task WaitForHeaderTransition(MyStates prev)
        {
            await RemoveInlineKeyboard("–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è?");
        }

        async Task InitTransition(MyStates prev)
        {
            if (prev == MyStates.Init)
                return;

            await _bot.SendTextMessageAsync(_chatId,
                $"–°–æ–∑–¥–∞—ë–º {_type}: {_body} {_header} {_assignee} {_board} {_severity}");
            _body = string.Empty;
            _header = string.Empty;
            _board = string.Empty;
            _severity = string.Empty;
            _assignee = string.Empty;
            _type = string.Empty;
        }

        // ################################################ 
        // –≤—Å—è–∫–æ–µ
        // ################################################
        private async Task SimplyMenuTransition(string text, InlineKeyboardMarkup inlineKeyboard)
        {
            if (_menuMessageId.HasValue)
            {
                await _bot.EditMessageTextAsync(_chatId, _menuMessageId.Value, text, replyMarkup: inlineKeyboard);
            }
            else
            {
                var msg = await _bot.SendTextMessageAsync(_chatId, text, replyMarkup: inlineKeyboard);
                _menuMessageId = msg.MessageId;
            }
        }

        private async Task RemoveInlineKeyboard(string text)
        {
            if (_menuMessageId.HasValue)
            {
                var msg = await _bot.EditMessageTextAsync(_chatId, _menuMessageId.Value, text, replyMarkup: null);
                _menuMessageId = null;
            }
            else
            {
                var msg = await _bot.SendTextMessageAsync(_chatId, text);

            }
        }
    }
}